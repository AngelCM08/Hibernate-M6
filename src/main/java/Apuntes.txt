// TODO Equivalencia a selectSpecificText() (DB_Selects)
Query query = entityManager.createQuery("SELECT * FROM Monstruo WHERE nombre = :nombre");
query.setParameter("nombre", nombreIntroducidoPorUsuario);
List<Monstruo> monstruos = query.getResultList();

// TODO Equivalencia a updateRegistersByCondition() (DB_Updates)

 Utilizando una sentencia JPQL de actualización para actualizar los registros de la tabla especificada
 por el parámetro "nombreTabla". La sentencia JPQL utiliza el nombre de la columna especificada por
 el parámetro "nombreColumna" para buscar los registros cuyo valor coincida con el valor antiguo
 especificado por el parámetro "valorAntiguo". Luego, el valor de esa columna se actualiza con el
 valor nuevo especificado por el parámetro "valorNuevo".

public void updateRegistersByCondition(String nombreTabla, String nombreColumna, String valorAntiguo, String valorNuevo) {
    EntityManager entityManager = // Obtener el EntityManager

    Query query = entityManager.createQuery("UPDATE " + nombreTabla + " SET "
                                            + nombreColumna + " = :valorNuevo WHERE "
                                            + nombreColumna + " = :valorAntiguo");
    query.setParameter("valorNuevo", valorNuevo);
    query.setParameter("valorAntiguo", valorAntiguo);

    EntityTransaction transaction = entityManager.getTransaction();
    transaction.begin();
    int numFilasActualizadas = query.executeUpdate();
    transaction.commit();

    System.out.println(numFilasActualizadas + " registros actualizados.");
}

// TO DO Equivalencia a deleteTableRegisterByCondition() (DB_Deletes)
Selecciona los registros de Monstruo que coinciden con el nombre proporcionado.
Luego, itera a través de la lista resultante y elimina cada Monstruo

public void eliminarMonstruoPorNombre(String nombre) {
    EntityManager entityManager = null;
    EntityTransaction transaction = null;

    try {
        entityManager = entityManagerFactory.createEntityManager();
        transaction = entityManager.getTransaction();
        transaction.begin();

        // Seleccionar el monstruo que coincide con el nombre proporcionado
        TypedQuery<Monstruo> query = entityManager.createQuery(
            "SELECT m FROM Monstruo m WHERE m.nombre = :nombre", Monstruo.class);
        query.setParameter("nombre", nombre);
        List<Monstruo> monstruos = query.getResultList();

        // Eliminar el monstruo
        for (Monstruo m : monstruos) {
            entityManager.remove(m);
        }

        transaction.commit();
    } catch (Exception e) {
        if (transaction != null) {
            transaction.rollback();
        }
        e.printStackTrace();
    } finally {
        if (entityManager != null) {
            entityManager.close();
        }
    }
}


// TODO para lanzar el script del schema.

Para ejecutar este script en la base de datos conectada por Hibernate, primero debes crear un
objeto SessionFactory a través del cual se establece la conexión con la base de datos.

Una vez que tienes el objeto SessionFactory, puedes abrir una sesión a través del método openSession()
y, a continuación, utilizar esa sesión para crear un objeto Transaction. Este objeto se utiliza para
iniciar una transacción y asegurarte de que todas las operaciones realizadas en la base de datos sean atómicas.

Una vez que hayas iniciado la transacción, puedes crear un objeto SQLQuery que contenga el script que
quieres ejecutar. Este objeto se crea utilizando el método createSQLQuery() de la sesión. A continuación,
puedes establecer el script que quieres ejecutar a través del método addScript() del objeto SQLQuery.

Finalmente, puedes ejecutar el script utilizando el método executeUpdate() del objeto SQLQuery.
Después de ejecutar el script, debes llamar al método commit() del objeto Transaction
 para confirmar la transacción y guardar los cambios realizados en la base de datos.

Aquí tienes un ejemplo de cómo puedes ejecutar el script en la base de datos conectada por Hibernate:

SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
Session session = sessionFactory.openSession();
Transaction transaction = session.beginTransaction();
SQLQuery query = session.createSQLQuery("src/main/resources/schema.sql");
query.executeUpdate();
transaction.commit();
session.close();